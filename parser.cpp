/* Quack parser driver
 * Author: Nate Letz
 * Thanks to Michal Young for skeleton
 */ 

#include "lex.yy.h"
#include "EvalContext.h"
#include "Messages.h"

class Driver {
public:
    /* Constructor */
    explicit Driver(reflex::Input in) : lexer(in), parser(new yy::parser(lexer)) {}

    /* Destructor */
    virtual ~Driver() { delete parser; }

    /* Main parse function */
    void parse() {
        // parser->set_debug_level(1); // 0 = no debugging, 1 = full tracing

        /* parse() is defined by Bison. it will return 0 if the parse succeeds, 1 if it fails */
        int result = parser->parse();
        if (result == 0 && report::ok()) {  // 0 == success, 1 == failure
            std::cout << "Parse complete! Program is valid.\n";
        } else {
            std::cout << "Parse failed! Program is invalid. See errors for more information.\n";
        }
    }

private:
    /* yy::Lexer is generated by RE\flex, located inside lex.yy.h & cpp.
    It takes a reflex::Input, and an ostream, which defaults to std::cout. */
    yy::Lexer lexer;
    yy::parser *parser; /* our parser class generated by Bison, holds our parse() function */

};

int main()
{
    Driver driver(std::cin);
    driver.parse();
}
